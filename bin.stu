@all: bin/ssimp;

    bin/ssimp
:   $[LINKER=bin/o/LINKER]
    $[LD_FLAGS=bin/o/LD_FLAGS]

    bin/o/ssimp.o
    bin/o/options.o
    bin/o/logging.o
    bin/o/file.reading.o
    bin/o/file.reading.vcfgztbi.o
    bin/o/mvn/mvn.o
    bin/o/gz/gzstream/gzstream.o
    bin/o/usage_special.o
    src/libStatGen/libStatGen.a # I need to think of a rule to automatically build this - must talk to the author about including her code
{
    echo LINKER:"${LINKER}" | tr '\n' ' '; echo
    echo LD_FLAGS:"${LD_FLAGS}" | tr '\n' ' '; echo
    ${LINKER} \
        bin/o/options.o \
        bin/o/ssimp.o \
        bin/o/logging.o \
        bin/o/file.reading.o \
        bin/o/file.reading.vcfgztbi.o \
        bin/o/mvn/mvn.o \
        bin/o/gz/gzstream/gzstream.o \
        bin/o/usage_special.o       \
        src/libStatGen/libStatGen.a \
        ${LD_FLAGS}               \
    -o bin/ssimp
}

>   bin/LIST_OF_HH_FILES
:   -p bin/o
    @unconditional
{
    sleep 1 # for a timestamp problem on our NFS
    find src -name '*.hh'
}

> src/usage_special.cc : main.stu docu/usage.txt {
    echo "// This file is automatically generated from 'docu/usage.txt'"
    echo "#include \"usage_special.hh\""
    echo "char const * usage_text = "
    echo -n "R\"--("
    cat docu/usage.txt
    echo ")--\";"
}

    bin/o/${name}.o
:   src/${name}.cc
    $[CXX_WITH_FLAGS=bin/o/CXX_WITH_FLAGS]
    [bin/LIST_OF_HH_FILES]
    src/libStatGen/include/VcfFileReader.h
{
    mkdir -p "$(dirname "bin/o/${name}.o")"
    ${CXX_WITH_FLAGS} -c "src/${name}.cc" -o "bin/o/${name}.o"
}

# special rule for gzstream.o # http://www.cs.unc.edu/Research/compgeom/gzstream/#src
    bin/o/gz/gzstream/gzstream.o
:   src/gz/gzstream/gzstream.C
    $[CXX_WITH_FLAGS=bin/o/CXX_WITH_FLAGS]
    [bin/LIST_OF_HH_FILES]
{
    mkdir -p bin/o/gz/gzstream
    ${CXX_WITH_FLAGS} -c "src/gz/gzstream/gzstream.C" -o "bin/o/gz/gzstream/gzstream.o"
}

>       bin/o/GCC_OR_CLANG
:   -p bin/o
       @all.stu.files
{
    which g++ g++ c++ clang | head -n1 # find one of these compilers
    sleep 1 # for a timestamp problem on our NFS

    # Also, include some general args we want to always pass,
    # regardless of whether we're compiling or linking

    echo " -O3"
    echo " -Wall -Wextra -std=c++14"
    if   test "$(whoami)" = 'amcdaid'  \
           -o "$(whoami)" = 'aaron'
    then
           echo ' -Werror'
           echo " -pg -ggdb                  " # For profiling
    fi

}

>       bin/o/LINKER
:       bin/o/GCC_OR_CLANG
{
    sleep 1 # for a timestamp problem on our NFS
    cat bin/o/GCC_OR_CLANG
    echo  " -lstdc++"
}
>       bin/o/LD_FLAGS
:       bin/local/gsl_libs
        bin.stu
{
    cat bin/local/gsl_libs
    echo " -lz "
}
>       bin/o/CXX_WITH_FLAGS
:       bin/o/GCC_OR_CLANG
        bin/local/gsl_cflags
{
    cat bin/o/GCC_OR_CLANG;
    echo " -isystem src/gz/gzstream "
    echo " -DGZSTREAM_NAMESPACE=gz "
    cat bin/local/gsl_cflags
}

bin/local { mkdir -p bin/local }
bin/o     { mkdir -p bin/o     }

>       bin/local/gsl_cflags
:   -p  bin/local
{
    sleep 1 # for a timestamp problem on our NFS
    gsl-config --cflags # For example: "-I/usr/include"
}
>       bin/local/gsl_libs
:   -p  bin/local
{
    sleep 1 # for a timestamp problem on our NFS
    gsl-config --libs # For example: "-lgsl -lgslcblas -lm"
}

        @all.stu.files
:       main.stu
        bin.stu
;

src/libStatGen/libStatGen.a
src/libStatGen/include/VcfFileReader.h
{
    # This builds 'libStatGen', used by 'ssimp' to read '.vcf.gz' files, and their '.tbi' indices.
    # We've copied the relevant code into this project, minus a few subdirectories.
    #
    # More info on 'libStatGen' http://genome.sph.umich.edu/wiki/C%2B%2B_Library:_libStatGen#Clone_.28get_your_own_copy.29
    #
    # It's GPL, as is 'ssimp'
    cd src/libStatGen
    make all -j
}

@unconditional {}

        @clean
{
    rm bin/ssimp                 || :
    rm bin/o/CXX_WITH_FLAGS      || :
    rm bin/LIST_OF_HH_FILES      || :
    find bin/o -name '*.o' -exec rm {} \;
    cd src/libStatGen
    make clean
}
